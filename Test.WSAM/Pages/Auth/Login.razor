@page "/login"
@inject IAccountManagement AccountManagement
@inject NavigationManager Navigation

<div class="col-12 col-md-5 col-lg-4">
<div class="card card-shadow border-0 rounded=3">
	<div class="card-body p-4">
		<div class="row g-6">
			<div class="col=12">
               <div class="text-center">
				   <h3 class="fw-bold fs-5 mb-2">Sign In</h3>
				   <p class="text=muted">Sign in to your account</p>
			 
			   </div>
			</div>
		</div>
		   <EditForm Model="Model" OnValidSubmit="Submit">
			   <DataAnnotationsValidator/>
			   <div class="form-floating mb-4">
				   <InputText 
					   @bind-Value = "Model!.Email"
					   type="email"
					   class="form-control rounded-2 border-0"
					   id="email"
					   placeholder=""
					   />
					   <label for="email">Email</label>
					   <ValidationMessage For="() => Model.Email" />
			   </div>

				<div class="form-floating mb-4">
					<InputText @bind-Value="Model!.Password"
							   type="password"
							   class="form-control rounded-2 border-0"
							   id="password"
							   placeholder="" />
							   
					<label for="password">Password</label>
					<ValidationMessage For="() => Model.Password" />
				</div>
				@if (isNew)
				{
					<div class="col-12">
						<div class="alert alert-success">
							<span>User registered successfully!</span>
						</div>
					</div>
				}
				<div class="col-12 @(errorList.Any() ? string.Empty : "d-none")" >
					<div class="alert alert-danger">
						@foreach(var error in errorList)
						{
							<span>@error</span>
						}
					</div>
				</div>
				<button type="submit" class="btn btn-primary btn-block p-3 fs-5 fw-bolder w-100" disabled ="@loading">Sign In</button>
				   </EditForm>
	</div>
</div>
<div class="text-center mt-4">
	<p class="text-muted">Dont have an account?</p>
	<NavLink href="/register">Sign Up</NavLink>
</div>
</div>


@code {
	[SupplyParameterFromForm]
	private LoginModel? Model { get; set; }
	private string[] errorList = [];
	protected override void OnInitialized() => Model ??= new();
	private bool loading = false;
	[SupplyParameterFromQuery(Name ="isNew")]
	private bool isNew{ get; set; }
	private async Task Submit()
	{
		loading = true;
		var result = await AccountManagement.LoginAsync(Model!);
		if (result.Succeeded)
		{
			Navigation.NavigateTo(uri: "/");
		}
		else
		{
			errorList = result.ErrorList;
		}
		loading = false;

	}
}
